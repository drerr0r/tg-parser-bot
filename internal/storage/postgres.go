package storage

import (
	"context"
	"fmt"
	"os"
	"path/filepath"
	"sort"
	"strings"
	"time"

	"github.com/drerr0r/tgparserbot/internal/models"
	"github.com/drerr0r/tgparserbot/pkg/logger"
	_ "github.com/golang-migrate/migrate/v4/source/file"
	"github.com/jackc/pgx/v5/pgxpool"
)

// DB –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
type DB struct {
	Pool *pgxpool.Pool
}

// New —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
func New(cfg models.DatabaseConfig) (*DB, error) {

	logger.Sugar().Infof("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: host=%s, port=%d, db=%s", cfg.Host, cfg.Port, cfg.Name)

	connString := fmt.Sprintf(
		"host=%s port=%d user=%s password=%s dbname=%s sslmode=%s",
		cfg.Host, cfg.Port, cfg.User, cfg.Password, cfg.Name, cfg.SSLMode,
	)

	poolConfig, err := pgxpool.ParseConfig(connString)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ñ–∏–≥–∞ –ë–î: %v", err)
	}

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
	poolConfig.MaxConns = 10
	poolConfig.MinConns = 2
	poolConfig.HealthCheckPeriod = 1 * time.Minute
	poolConfig.MaxConnLifetime = 1 * time.Hour

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	pool, err := pgxpool.NewWithConfig(ctx, poolConfig)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	if err := pool.Ping(ctx); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ ping –ë–î: %v", err)
	}

	return &DB{Pool: pool}, nil
}

// Close –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
func (db *DB) Close() {
	if db.Pool != nil {
		db.Pool.Close()
	}
}

// RunMigrations –∑–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î
func (db *DB) RunMigrations(migrationsPath string) error {
	logger.Sugar().Infof("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –∏–∑: %s", migrationsPath)

	// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∏–≥—Ä–∞—Ü–∏–π –∏–∑ –ø–∞–ø–∫–∏
	migrations, err := db.readMigrationFiles(migrationsPath)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π: %v", err)
	}

	if len(migrations) == 0 {
		logger.Sugar().Warn("‚ö†Ô∏è  –í –ø–∞–ø–∫–µ –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤")
		return nil
	}

	logger.Sugar().Infof("üìÅ –ù–∞–π–¥–µ–Ω–æ –º–∏–≥—Ä–∞—Ü–∏–π: %d", len(migrations))
	logger.Sugar().Debugf("üìã –°–ø–∏—Å–æ–∫ –º–∏–≥—Ä–∞—Ü–∏–π: %v", migrations)

	// –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
	for _, migrationFile := range migrations {
		version := strings.TrimSuffix(migrationFile, ".sql")

		logger.Sugar().Debugf("üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é: %s", version)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏—è
		applied, err := db.isMigrationApplied(version)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ %s: %v", migrationFile, err)
		}

		if applied {
			logger.Sugar().Infof("‚è≠Ô∏è  –ú–∏–≥—Ä–∞—Ü–∏—è %s —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", migrationFile)
			continue
		}

		logger.Sugar().Infof("üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è %s –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ", migrationFile)

		// –ß–∏—Ç–∞–µ–º –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
		if err := db.applyMigration(migrationsPath, migrationFile, version); err != nil {
			return err
		}
	}

	logger.Sugar().Info("‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
	return nil
}

// readMigrationFiles —á–∏—Ç–∞–µ—Ç –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–π –∏–∑ –ø–∞–ø–∫–∏
func (db *DB) readMigrationFiles(migrationsPath string) ([]string, error) {
	entries, err := os.ReadDir(migrationsPath)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–π: %v", err)
	}

	var migrations []string
	for _, entry := range entries {
		if !entry.IsDir() && strings.HasSuffix(entry.Name(), ".sql") {
			migrations = append(migrations, entry.Name())
		}
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ –∏–º–µ–Ω–∏ (–æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –Ω–æ–º–µ—Ä–∞)
	sort.Strings(migrations)

	logger.Sugar().Debugf("üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏: %v", migrations)
	return migrations, nil
}

// isMigrationApplied –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è
func (db *DB) isMigrationApplied(version string) (bool, error) {
	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –º–∏–≥—Ä–∞—Ü–∏–π
	var tableExists bool
	err := db.Pool.QueryRow(context.Background(),
		"SELECT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'schema_migrations')",
	).Scan(&tableExists)

	if err != nil {
		return false, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –º–∏–≥—Ä–∞—Ü–∏–π: %v", err)
	}

	if !tableExists {
		return false, nil
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã - –µ—Å–ª–∏ version –∏–º–µ–µ—Ç —Ç–∏–ø bigint, –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
	var columnType string
	err = db.Pool.QueryRow(context.Background(),
		`SELECT data_type FROM information_schema.columns 
         WHERE table_name = 'schema_migrations' AND column_name = 'version'`,
	).Scan(&columnType)

	if err != nil {
		return false, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã: %v", err)
	}

	// –ï—Å–ª–∏ —Ç–∏–ø BIGINT, —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è - —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞
	if columnType == "bigint" {
		logger.Sugar().Warn("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ schema_migrations (version BIGINT)")
		return false, nil
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è
	var applied bool
	err = db.Pool.QueryRow(context.Background(),
		"SELECT EXISTS (SELECT 1 FROM schema_migrations WHERE version = $1)",
		version,
	).Scan(&applied)

	if err != nil {
		return false, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ %s: %v", version, err)
	}

	return applied, nil
}

// applyMigration –ø—Ä–∏–º–µ–Ω—è–µ—Ç –æ–¥–Ω—É –º–∏–≥—Ä–∞—Ü–∏—é
func (db *DB) applyMigration(migrationsPath, migrationFile, version string) error {
	// –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏
	filePath := filepath.Join(migrationsPath, migrationFile)
	content, err := os.ReadFile(filePath)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ %s: %v", migrationFile, err)
	}

	logger.Sugar().Infof("üìù –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é: %s", migrationFile)

	// –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
	tx, err := db.Pool.Begin(context.Background())
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è %s: %v", migrationFile, err)
	}
	defer func() {
		if err != nil {
			tx.Rollback(context.Background())
		}
	}()

	// –í—ã–ø–æ–ª–Ω—è–µ–º SQL –º–∏–≥—Ä–∞—Ü–∏–∏
	if _, err := tx.Exec(context.Background(), string(content)); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ %s: %v", migrationFile, err)
	}

	// –û—Ç–º–µ—á–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∫–∞–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—É—é
	markQuery := "INSERT INTO schema_migrations (version) VALUES ($1)"
	if _, err := tx.Exec(context.Background(), markQuery, version); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ %s: %v", migrationFile, err)
	}

	if err := tx.Commit(context.Background()); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∫–æ–º–º–∏—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è %s: %v", migrationFile, err)
	}

	logger.Sugar().Infof("‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è: %s", migrationFile)
	return nil
}

// HealthCheck –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ë–î
func (db *DB) HealthCheck() error {
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	return db.Pool.Ping(ctx)
}

// CheckColumnsExist –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ posts
func (db *DB) CheckColumnsExist() bool {
	query := `
		SELECT COUNT(*) 
		FROM information_schema.columns 
		WHERE table_schema = 'public' 
		AND table_name = 'posts'
		AND column_name IN (
			'id', 'rule_id', 'message_id', 'source_channel', 'content', 
			'media_type', 'media_url', 'posted_at', 'parsed_at',
			'published_telegram', 'published_vk', 'publish_error'
		)
	`

	var count int
	err := db.Pool.QueryRow(context.Background(), query).Scan(&count)
	if err != nil {
		return false
	}

	// –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 12 –∫–æ–ª–æ–Ω–æ–∫ (–≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ)
	return count == 12
}

// CheckMigrationsApplied –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –ª–∏ –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏
func (db *DB) CheckMigrationsApplied() bool {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –º–∏–≥—Ä–∞—Ü–∏–π
	var tableExists bool
	err := db.Pool.QueryRow(context.Background(),
		"SELECT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'schema_migrations')",
	).Scan(&tableExists)

	if err != nil || !tableExists {
		return false
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π
	migrations, err := db.readMigrationFiles("./migrations")
	if err != nil || len(migrations) == 0 {
		return false
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã
	for _, migrationFile := range migrations {
		version := strings.TrimSuffix(migrationFile, ".sql")

		var applied bool
		err := db.Pool.QueryRow(context.Background(),
			"SELECT EXISTS (SELECT 1 FROM schema_migrations WHERE version = $1)",
			version,
		).Scan(&applied)

		if err != nil || !applied {
			return false
		}
	}

	return true
}
