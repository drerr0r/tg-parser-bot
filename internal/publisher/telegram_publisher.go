package publisher

import (
	"context"
	"fmt"
	"strconv"
	"strings"

	"github.com/drerr0r/tgparserbot/internal/models"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"go.uber.org/zap"
)

// TelegramPublisher –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä –≤ Telegram
type TelegramPublisher struct {
	bot    *tgbotapi.BotAPI
	logger *zap.SugaredLogger
}

// NewTelegramPublisher —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä –¥–ª—è Telegram
func NewTelegramPublisher(botToken string, logger *zap.SugaredLogger) (*TelegramPublisher, error) {
	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ Telegram: %v", err)
	}

	logger.Infof("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ Telegram –∫–∞–∫ %s", bot.Self.UserName)

	return &TelegramPublisher{
		bot:    bot,
		logger: logger,
	}, nil
}

// Publish –ø—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç –≤ Telegram –∫–∞–Ω–∞–ª
func (p *TelegramPublisher) Publish(ctx context.Context, post *models.Post, targetChannel string) error {
	p.logger.Infof("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ %d –≤ –∫–∞–Ω–∞–ª %s", post.ID, targetChannel)

	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º channel name –≤ ChatID
	chatID, err := p.getChatID(targetChannel)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ChatID –¥–ª—è %s: %v", targetChannel, err)
	}

	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
	content := p.prepareContent(post)

	// –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞, –ø—É–±–ª–∏–∫—É–µ–º —Å –º–µ–¥–∏–∞
	if post.MediaURL != "" {
		return p.publishWithMedia(post, chatID, content)
	}

	// –ü—É–±–ª–∏–∫—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	return p.publishText(chatID, content)
}

// getChatID –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç channel name –∏–ª–∏ ID –≤ int64
func (p *TelegramPublisher) getChatID(target string) (int64, error) {
	// –ï—Å–ª–∏ target –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @, —ç—Ç–æ username –∫–∞–Ω–∞–ª–∞
	if strings.HasPrefix(target, "@") {
		// –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ –ø–æ username –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç—å chat_id –∏–∑ –æ—Ç–≤–µ—Ç–∞
		// –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ getUpdates —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª
		chatID, err := p.findChatIDByUsername(target)
		if err != nil {
			return 0, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ chat_id –¥–ª—è %s: %v", target, err)
		}
		return chatID, nil
	}

	// –ï—Å–ª–∏ target - —á–∏—Å–ª–æ–≤–æ–π ID
	chatID, err := strconv.ParseInt(target, 10, 64)
	if err != nil {
		return 0, fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ChatID: %s", target)
	}

	return chatID, nil
}

// findChatIDByUsername –Ω–∞—Ö–æ–¥–∏—Ç chat_id –∫–∞–Ω–∞–ª–∞ –ø–æ username
func (p *TelegramPublisher) findChatIDByUsername(username string) (int64, error) {
	// –ú–µ—Ç–æ–¥ 1: –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç—å chat_id –∏–∑ –æ—Ç–≤–µ—Ç–∞
	msg := tgbotapi.NewMessageToChannel(username, "test")
	sentMsg, err := p.bot.Send(msg)
	if err != nil {
		// –ú–µ—Ç–æ–¥ 2: –ò—Å–ø–æ–ª—å–∑—É–µ–º getUpdates —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª
		return p.getChatIDFromUpdates(username)
	}
	return sentMsg.Chat.ID, nil
}

// getChatIDFromUpdates –∏—â–µ—Ç chat_id –≤ —Å–ø–∏—Å–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
func (p *TelegramPublisher) getChatIDFromUpdates(username string) (int64, error) {
	updates, err := p.bot.GetUpdates(tgbotapi.UpdateConfig{
		Offset:  0,
		Limit:   100,
		Timeout: 10,
	})
	if err != nil {
		return 0, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: %v", err)
	}

	// –ò—â–µ–º –∫–∞–Ω–∞–ª –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö
	for _, update := range updates {
		if update.ChannelPost != nil && update.ChannelPost.Chat != nil {
			if update.ChannelPost.Chat.UserName == strings.TrimPrefix(username, "@") {
				return update.ChannelPost.Chat.ID, nil
			}
		}
		if update.Message != nil && update.Message.Chat != nil {
			if update.Message.Chat.UserName == strings.TrimPrefix(username, "@") {
				return update.Message.Chat.ID, nil
			}
		}
	}

	return 0, fmt.Errorf("–∫–∞–Ω–∞–ª %s –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª", username)
}

// publishWithMedia –ø—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç —Å –º–µ–¥–∏–∞
func (p *TelegramPublisher) publishWithMedia(post *models.Post, chatID int64, content string) error {
	switch post.MediaType {
	case models.MediaPhoto:
		return p.publishPhoto(post, chatID, content)
	case models.MediaVideo:
		return p.publishVideo(post, chatID, content)
	case models.MediaDocument:
		return p.publishDocument(post, chatID, content)
	default:
		return p.publishText(chatID, content)
	}
}

// publishPhoto –ø—É–±–ª–∏–∫—É–µ—Ç —Ñ–æ—Ç–æ
func (p *TelegramPublisher) publishPhoto(post *models.Post, chatID int64, caption string) error {
	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è —Ñ–æ—Ç–æ —Å URL
	photo := tgbotapi.NewPhoto(chatID, tgbotapi.FileURL(post.MediaURL))
	photo.Caption = caption
	photo.ParseMode = "HTML"

	_, err := p.bot.Send(photo)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ñ–æ—Ç–æ: %v", err)
	}
	return nil
}

// publishVideo –ø—É–±–ª–∏–∫—É–µ—Ç –≤–∏–¥–µ–æ
func (p *TelegramPublisher) publishVideo(post *models.Post, chatID int64, caption string) error {
	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –≤–∏–¥–µ–æ —Å URL
	video := tgbotapi.NewVideo(chatID, tgbotapi.FileURL(post.MediaURL))
	video.Caption = caption
	video.ParseMode = "HTML"

	_, err := p.bot.Send(video)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: %v", err)
	}
	return nil
}

// publishDocument –ø—É–±–ª–∏–∫—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç
func (p *TelegramPublisher) publishDocument(post *models.Post, chatID int64, caption string) error {
	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å URL
	document := tgbotapi.NewDocument(chatID, tgbotapi.FileURL(post.MediaURL))
	document.Caption = caption
	document.ParseMode = "HTML"

	_, err := p.bot.Send(document)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: %v", err)
	}
	return nil
}

// publishText –ø—É–±–ª–∏–∫—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (p *TelegramPublisher) publishText(chatID int64, content string) error {
	msg := tgbotapi.NewMessage(chatID, content)
	msg.ParseMode = "HTML"

	_, err := p.bot.Send(msg)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: %v", err)
	}
	return nil
}

// prepareContent –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
func (p *TelegramPublisher) prepareContent(post *models.Post) string {
	var content strings.Builder

	// –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML-—Å–∏–º–≤–æ–ª—ã
	escapedContent := strings.ReplaceAll(post.Content, "&", "&amp;")
	escapedContent = strings.ReplaceAll(escapedContent, "<", "&lt;")
	escapedContent = strings.ReplaceAll(escapedContent, ">", "&gt;")

	content.WriteString(escapedContent)

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
	if post.SourceChannel != "" {
		content.WriteString(fmt.Sprintf("\n\nüìé <i>–ò—Å—Ç–æ—á–Ω–∏–∫: %s</i>", post.SourceChannel))
	}

	return content.String()
}

// TestConnection –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
func (p *TelegramPublisher) TestConnection(ctx context.Context) error {
	_, err := p.bot.GetMe()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: %v", err)
	}
	return nil
}
