package publisher

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"mime/multipart"
	"net/http"
	"strings"

	"github.com/drerr0r/tgparserbot/internal/models"

	"github.com/SevereCloud/vksdk/v2/api"
	"github.com/SevereCloud/vksdk/v2/api/params"
	"go.uber.org/zap"
)

// VKPublisher –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä –≤ VK
type VKPublisher struct {
	vk      *api.VK
	groupID int
	logger  *zap.SugaredLogger
}

// NewVKPublisher —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä –¥–ª—è VK
func NewVKPublisher(accessToken string, groupID int, logger *zap.SugaredLogger) (*VKPublisher, error) {
	vk := api.NewVK(accessToken)

	// –ë–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ - –∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	_, err := vk.UsersGet(api.Params{
		"user_ids": 1, // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å ID 1
		"fields":   "first_name,last_name",
	})
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ VK: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≥—Ä—É–ø–ø–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω groupID)
	if groupID != 0 {
		groups, err := vk.GroupsGetByID(api.Params{
			"group_ids": groupID,
		})
		if err != nil {
			logger.Warnf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥—Ä—É–ø–ø—É %d: %v", groupID, err)
		} else if len(groups) > 0 {
			logger.Infof("–ì—Ä—É–ø–ø–∞ –Ω–∞–π–¥–µ–Ω–∞: %s", groups[0].Name)
		}
	}

	logger.Info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VK API")

	return &VKPublisher{
		vk:      vk,
		groupID: groupID,
		logger:  logger,
	}, nil
}

// Publish –ø—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç –≤ VK –≥—Ä—É–ø–ø—É
func (p *VKPublisher) Publish(ctx context.Context, post *models.Post) error {
	p.logger.Infof("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ %d –≤ VK –≥—Ä—É–ø–ø—É %d", post.ID, p.groupID)

	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
	content := p.prepareContent(post)

	// –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ—Å—Ç–∞
	b := params.NewWallPostBuilder()

	b.OwnerID(-p.groupID) // –î–ª—è –≥—Ä—É–ø–ø –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ID
	b.Message(content)
	b.FromGroup(true)

	// –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
	if post.MediaURL != "" {
		// –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ–¥–∏–∞ –∏ –ø–æ–ª—É—á–∞–µ–º attachment
		attachment, err := p.uploadMedia(post)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞: %v", err)
		}
		if attachment != "" {
			b.Attachments(attachment)
		}
	}

	// –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
	_, err := p.vk.WallPost(b.Params)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ VK: %v", err)
	}

	p.logger.Infof("–ü–æ—Å—Ç %d —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ VK", post.ID)
	return nil
}

// TestConnection –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VK
func (p *VKPublisher) TestConnection(ctx context.Context) error {
	_, err := p.vk.GroupsGetByID(api.Params{
		"group_ids": p.groupID,
	})
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VK: %v", err)
	}
	return nil
}

// prepareContent –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
func (p *VKPublisher) prepareContent(post *models.Post) string {
	var content strings.Builder

	content.WriteString(post.Content)

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
	if post.SourceChannel != "" {
		content.WriteString(fmt.Sprintf("\n\nüìé –ò—Å—Ç–æ—á–Ω–∏–∫: %s", post.SourceChannel))
	}

	return content.String()
}

// uploadMedia –∑–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ–¥–∏–∞ —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç attachment
func (p *VKPublisher) uploadMedia(post *models.Post) (string, error) {
	p.logger.Infof("–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞ –≤ VK: %s (—Ç–∏–ø: %s)", post.MediaURL, post.MediaType)

	switch post.MediaType {
	case models.MediaPhoto:
		return p.uploadPhoto(post)
	case models.MediaVideo:
		return p.uploadVideo(post)
	case models.MediaDocument:
		return p.uploadDocument(post)
	default:
		p.logger.Warnf("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞ –¥–ª—è VK: %s", post.MediaType)
		return "", nil
	}
}

// uploadPhoto –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–æ—Ç–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç attachment
func (p *VKPublisher) uploadPhoto(post *models.Post) (string, error) {
	// 1. –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
	uploadServer, err := p.vk.PhotosGetWallUploadServer(api.Params{
		"group_id": p.groupID,
	})
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è upload server: %v", err)
	}

	// 2. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
	photoData, err := p.uploadFileToVK(uploadServer.UploadURL, post.MediaURL, "photo")
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: %v", err)
	}

	// 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –∞–ª—å–±–æ–º –≥—Ä—É–ø–ø—ã
	savedPhoto, err := p.vk.PhotosSaveWallPhoto(api.Params{
		"group_id": p.groupID,
		"photo":    photoData.Photo,
		"server":   photoData.Server,
		"hash":     photoData.Hash,
	})
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ: %v", err)
	}

	if len(savedPhoto) == 0 {
		return "", fmt.Errorf("—Ñ–æ—Ç–æ –Ω–µ –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
	}

	// 4. –§–æ—Ä–º–∏—Ä—É–µ–º attachment
	photo := savedPhoto[0]
	return fmt.Sprintf("photo%d_%d", photo.OwnerID, photo.ID), nil
}

// uploadVideo –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤–∏–¥–µ–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç attachment
func (p *VKPublisher) uploadVideo(post *models.Post) (string, error) {
	// 1. –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
	uploadServer, err := p.vk.VideoSave(api.Params{
		"group_id":    p.groupID,
		"name":        "Video from parser",
		"description": fmt.Sprintf("Source: %s", post.SourceChannel),
	})
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è upload server –¥–ª—è –≤–∏–¥–µ–æ: %v", err)
	}

	// 2. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
	_, err = p.uploadFileToVK(uploadServer.UploadURL, post.MediaURL, "video_file")
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: %v", err)
	}

	// 3. –í–∏–¥–µ–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
	// –§–æ—Ä–º–∏—Ä—É–µ–º attachment –∏–∑ –æ—Ç–≤–µ—Ç–∞
	return fmt.Sprintf("video%d_%d", uploadServer.OwnerID, uploadServer.VideoID), nil
}

// uploadDocument –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç attachment
func (p *VKPublisher) uploadDocument(post *models.Post) (string, error) {
	// 1. –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
	uploadServer, err := p.vk.DocsGetWallUploadServer(api.Params{
		"group_id": p.groupID,
	})
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è upload server –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: %v", err)
	}

	// 2. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
	docData, err := p.uploadFileToVK(uploadServer.UploadURL, post.MediaURL, "file")
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: %v", err)
	}

	// 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
	savedDoc, err := p.vk.DocsSave(api.Params{
		"file":  docData.File,
		"title": "Document from parser",
	})
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω
	if savedDoc.Doc.ID == 0 {
		return "", fmt.Errorf("–¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
	}

	// 4. –§–æ—Ä–º–∏—Ä—É–µ–º attachment
	return fmt.Sprintf("doc%d_%d", savedDoc.Doc.OwnerID, savedDoc.Doc.ID), nil
}

// uploadFileToVK –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –ø–æ URL –Ω–∞ —Å–µ—Ä–≤–µ—Ä VK
func (p *VKPublisher) uploadFileToVK(uploadURL, fileURL, fieldName string) (*VKUploadResponse, error) {
	// 1. –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –ø–æ URL
	resp, err := http.Get(fileURL)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ HTTP: %s", resp.Status)
	}

	// 2. –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
	fileData, err := io.ReadAll(resp.Body) // ‚Üê –ü–ï–†–ï–ú–ï–°–¢–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£ –í–´–®–ï
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
	}

	// –î–û–ë–ê–í–ò–¢–¨ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —á—Ç–µ–Ω–∏—è:
	if len(fileData) == 0 {
		return nil, fmt.Errorf("—Ñ–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
	}

	if len(fileData) > 50*1024*1024 { // 50MB limit
		return nil, fmt.Errorf("—Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: %d bytes", len(fileData))
	}

	// 3. –°–æ–∑–¥–∞–µ–º multipart —Ñ–æ—Ä–º—É
	var requestBody bytes.Buffer
	writer := multipart.NewWriter(&requestBody)

	// –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ –¥–ª—è —Ñ–∞–π–ª–∞
	part, err := writer.CreateFormFile(fieldName, "file")
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ä–º—ã: %v", err)
	}

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
	if _, err := part.Write(fileData); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º—É: %v", err)
	}

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º writer
	if err := writer.Close(); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã: %v", err)
	}

	// 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä VK
	req, err := http.NewRequest("POST", uploadURL, &requestBody)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}

	req.Header.Set("Content-Type", writer.FormDataContentType())

	client := &http.Client{}
	resp, err = client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: %v", err)
	}
	defer resp.Body.Close()

	// 5. –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ VK
	responseData, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	// 6. –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
	var uploadResponse VKUploadResponse
	if err := json.Unmarshal(responseData, &uploadResponse); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	if uploadResponse.Error != "" {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ VK: %s", uploadResponse.Error)
	}

	return &uploadResponse, nil
}

// VKUploadResponse —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç VK upload server
type VKUploadResponse struct {
	Server int    `json:"server"`
	Photo  string `json:"photo"`
	Hash   string `json:"hash"`
	File   string `json:"file"`
	Error  string `json:"error"`
}
