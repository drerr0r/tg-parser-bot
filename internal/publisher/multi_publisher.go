package publisher

import (
	"context"
	"fmt"
	"strings"

	"github.com/drerr0r/tgparserbot/internal/models"
	"github.com/drerr0r/tgparserbot/internal/storage"
	"go.uber.org/zap"
)

// MultiPublisher —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –≤ multiple –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
type MultiPublisher struct {
	tgPublisher *TelegramPublisher
	vkPublisher *VKPublisher
	postRepo    *storage.PostRepository
	logger      *zap.SugaredLogger
	tgChannelID string // ChatID –¥–ª—è Telegram –∫–∞–Ω–∞–ª–∞
}

// NewMultiPublisher —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º—É–ª—å—Ç–∏-–ø—É–±–ª–∏–∫–∞—Ç–æ—Ä
func NewMultiPublisher(
	tgPublisher *TelegramPublisher,
	vkPublisher *VKPublisher,
	postRepo *storage.PostRepository,
	tgChannelID string,
	logger *zap.SugaredLogger,
) *MultiPublisher {
	return &MultiPublisher{
		tgPublisher: tgPublisher,
		vkPublisher: vkPublisher,
		postRepo:    postRepo,
		tgChannelID: tgChannelID,
		logger:      logger,
	}
}

// containsPlatform –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤ –º–∞—Å—Å–∏–≤–µ
func containsPlatform(platforms []models.PlatformType, platform string) bool {
	for _, p := range platforms {
		if string(p) == platform {
			return true
		}
	}
	return false
}
func (p *MultiPublisher) Publish(ctx context.Context, post *models.Post, rule *models.ParsingRule) error {
	p.logger.Infof("üîÑ –ù–∞—á–∞–ª–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ %d –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: %v", post.ID, rule.TargetPlatforms)

	var errors []string
	publishedPlatforms := []string{}

	// –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram
	if p.tgPublisher != nil && containsPlatform(rule.TargetPlatforms, "telegram") {
		p.logger.Infof("üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ %d –Ω–∞ telegram", post.ID)
		if err := p.tgPublisher.Publish(ctx, post, p.tgChannelID); err != nil {
			p.logger.Errorf("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram: %v", err)
			errors = append(errors, fmt.Sprintf("Telegram: %v", err))
		} else {
			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
			if err := p.postRepo.MarkAsPublishedTelegram(ctx, post.ID); err != nil {
				p.logger.Errorf("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ Telegram: %v", err)
			} else {
				publishedPlatforms = append(publishedPlatforms, "telegram")
				p.logger.Infof("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ %d –Ω–∞ telegram", post.ID)
			}
		}
	}

	// –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ VK
	if p.vkPublisher != nil && containsPlatform(rule.TargetPlatforms, "vk") {
		p.logger.Infof("üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ %d –Ω–∞ vk", post.ID)
		if err := p.vkPublisher.Publish(ctx, post); err != nil {
			p.logger.Errorf("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ VK: %v", err)
			errors = append(errors, fmt.Sprintf("VK: %v", err))
		} else {
			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
			if err := p.postRepo.MarkAsPublishedVK(ctx, post.ID); err != nil {
				p.logger.Errorf("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ VK: %v", err)
			} else {
				publishedPlatforms = append(publishedPlatforms, "vk")
				p.logger.Infof("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ %d –Ω–∞ vk", post.ID)
			}
		}
	}

	if len(errors) > 0 {
		errorMsg := strings.Join(errors, "; ")
		if err := p.postRepo.MarkAsFailed(ctx, post.ID, errorMsg); err != nil {
			p.logger.Errorf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: %v", err)
		}
		return fmt.Errorf("–æ—à–∏–±–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: %s", errorMsg)
	}

	p.logger.Infof("üéâ –ü–æ—Å—Ç %d —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: %v", post.ID, publishedPlatforms)
	return nil
}

// ProcessUnpublished –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
func (p *MultiPublisher) ProcessUnpublished(ctx context.Context) error {
	p.logger.Info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤...")

	// –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
	posts, err := p.postRepo.GetUnpublishedPosts(ctx, 10) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 –ø–æ—Å—Ç–∞–º–∏ –∑–∞ —Ä–∞–∑
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: %v", err)
	}

	if len(posts) == 0 {
		p.logger.Info("–ù–µ—Ç –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
		return nil
	}

	p.logger.Infof("–ù–∞–π–¥–µ–Ω–æ %d –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤", len(posts))

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç
	for _, post := range posts {
		// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –ø–æ—Å—Ç–∞
		// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ post.RuleID

		// –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ - —Å–æ–∑–¥–∞–µ–º mock –ø—Ä–∞–≤–∏–ª–æ
		rule := &models.ParsingRule{
			TargetPlatforms: []models.PlatformType{models.PlatformTelegram, models.PlatformVK},
		}

		if err := p.Publish(ctx, post, rule); err != nil {
			p.logger.Errorf("–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ %d: %v", post.ID, err)
			continue
		}
	}

	return nil
}

// TestConnections –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ –≤—Å–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
func (p *MultiPublisher) TestConnections(ctx context.Context) error {
	p.logger.Info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º...")

	if p.tgPublisher != nil {
		if err := p.tgPublisher.TestConnection(ctx); err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Telegram: %v", err)
		}
		p.logger.Info("‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram OK")
	}

	if p.vkPublisher != nil {
		if err := p.vkPublisher.TestConnection(ctx); err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è VK: %v", err)
		}
		p.logger.Info("‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VK OK")
	}

	p.logger.Info("–í—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç")
	return nil
}
