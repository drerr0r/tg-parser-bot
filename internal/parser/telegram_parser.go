package parser

import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/drerr0r/tgparserbot/internal/models"
	"github.com/drerr0r/tgparserbot/internal/publisher"
	"github.com/drerr0r/tgparserbot/internal/storage"
	"go.uber.org/zap"
)

// TelegramParser –ø–∞—Ä—Å–µ—Ä Telegram –∫–∞–Ω–∞–ª–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º MTProto
type TelegramParser struct {
	storage        *storage.DB
	ruleRepo       *storage.RuleRepository
	postRepo       *storage.PostRepository
	multiPublisher *publisher.MultiPublisher
	mtprotoClient  *MTProtoClient
	logger         *zap.SugaredLogger
	isRunning      bool
	cancelFunc     context.CancelFunc
	lastMessageIDs map[string]int64 // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–∞–Ω–∞–ª–∞–º
}

// NewTelegramParser —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä
func NewTelegramParser(
	storage *storage.DB,
	ruleRepo *storage.RuleRepository,
	postRepo *storage.PostRepository,
	multiPublisher *publisher.MultiPublisher,
	mtprotoClient *MTProtoClient,
	logger *zap.SugaredLogger,
) *TelegramParser {
	return &TelegramParser{
		storage:        storage,
		ruleRepo:       ruleRepo,
		postRepo:       postRepo,
		multiPublisher: multiPublisher,
		mtprotoClient:  mtprotoClient,
		logger:         logger,
		isRunning:      false,
		lastMessageIDs: make(map[string]int64),
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤
func (p *TelegramParser) Start(ctx context.Context) error {
	if p.isRunning {
		return fmt.Errorf("–ø–∞—Ä—Å–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
	}

	p.logger.Info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤ —Å MTProto...")

	// –ó–∞–ø—É—Å–∫–∞–µ–º MTProto –∫–ª–∏–µ–Ω—Ç
	if err := p.mtprotoClient.Start(ctx); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ MTProto –∫–ª–∏–µ–Ω—Ç–∞: %v", err)
	}

	// –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
	time.Sleep(3 * time.Second)

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
	rules, err := p.ruleRepo.GetActiveRules(ctx)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª: %v", err)
	}

	if len(rules) == 0 {
		p.logger.Warn("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
		return nil
	}

	p.logger.Infof("üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ %d –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª", len(rules))

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –æ—Ç–º–µ–Ω–æ–π
	ctx, cancel := context.WithCancel(ctx)
	p.cancelFunc = cancel
	p.isRunning = true

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º lastMessageIDs
	for _, rule := range rules {
		lastPost, err := p.postRepo.GetLastMessageID(ctx, rule.SourceChannel)
		if err == nil && lastPost != nil {
			p.lastMessageIDs[rule.SourceChannel] = lastPost.MessageID
		} else {
			p.lastMessageIDs[rule.SourceChannel] = 0
		}
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
	for _, rule := range rules {
		p.logger.Infof("üéØ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞: %s", rule.SourceChannel)
		go p.monitorChannel(ctx, rule)
	}

	p.logger.Info("‚úÖ Telegram –ø–∞—Ä—Å–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
	return nil
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥
func (p *TelegramParser) Stop() {
	if p.cancelFunc != nil {
		p.cancelFunc()
	}
	// MTProto –∫–ª–∏–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	p.isRunning = false
	p.logger.Info("üõë –ü–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}

// monitorChannel –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª
func (p *TelegramParser) monitorChannel(ctx context.Context, rule *models.ParsingRule) {
	channelDisplay := p.getChannelDisplayName(rule.SourceChannel)
	p.logger.Infof("üîç –ù–∞—á–∞–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞: %s", channelDisplay)

	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	if err := p.checkHistoricalMessages(ctx, rule); err != nil {
		p.logger.Errorf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: %v", err)
	}

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
	interval := p.getCheckInterval(rule)
	ticker := time.NewTicker(interval)
	defer ticker.Stop()

	p.logger.Infof("‚è∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ %s —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º %v", channelDisplay, interval)

	for {
		select {
		case <-ctx.Done():
			p.logger.Infof("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞: %s", channelDisplay)
			return
		case <-ticker.C:
			if err := p.checkNewMessages(ctx, rule); err != nil {
				p.logger.Errorf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ %s: %v", channelDisplay, err)
			}
		}
	}
}

// checkHistoricalMessages –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (p *TelegramParser) checkHistoricalMessages(ctx context.Context, rule *models.ParsingRule) error {
	channelDisplay := p.getChannelDisplayName(rule.SourceChannel)
	p.logger.Infof("üìö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–Ω–∞–ª–∞: %s", channelDisplay)

	// –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ MTProto
	messages, err := p.mtprotoClient.GetChannelMessages(ctx, p.normalizeChannel(rule.SourceChannel), 20)
	if err != nil {
		return fmt.Errorf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: %v", err)
	}

	p.logger.Infof("üì• –ü–æ–ª—É—á–µ–Ω–æ %d —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–∞–Ω–∞–ª–∞ %s", len(messages), channelDisplay)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
	processedCount := 0
	for _, msg := range messages {
		if err := p.processMessage(ctx, rule, msg); err != nil {
			p.logger.Errorf("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
			continue
		}
		processedCount++

		// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ID —Å–æ–æ–±—â–µ–Ω–∏—è
		if msg.ID > p.lastMessageIDs[rule.SourceChannel] {
			p.lastMessageIDs[rule.SourceChannel] = msg.ID
		}

		// –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
		time.Sleep(100 * time.Millisecond)
	}

	p.logger.Infof("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ %d/%d —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–∞–Ω–∞–ª–∞ %s", processedCount, len(messages), channelDisplay)
	return nil
}

// checkNewMessages –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (p *TelegramParser) checkNewMessages(ctx context.Context, rule *models.ParsingRule) error {
	channelDisplay := p.getChannelDisplayName(rule.SourceChannel)
	p.logger.Debugf("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ: %s", channelDisplay)

	lastMessageID := p.lastMessageIDs[rule.SourceChannel]

	// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ MTProto
	messages, err := p.mtprotoClient.GetNewMessages(ctx, p.normalizeChannel(rule.SourceChannel), lastMessageID)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: %v", err)
	}

	if len(messages) > 0 {
		p.logger.Infof("üÜï –ù–∞–π–¥–µ–Ω–æ %d –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ %s", len(messages), channelDisplay)
	}

	for _, msg := range messages {
		if err := p.processMessage(ctx, rule, msg); err != nil {
			p.logger.Errorf("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		} else {
			// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ID —Å–æ–æ–±—â–µ–Ω–∏—è
			if msg.ID > p.lastMessageIDs[rule.SourceChannel] {
				p.lastMessageIDs[rule.SourceChannel] = msg.ID
			}
		}
	}

	return nil
}

// processMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
func (p *TelegramParser) processMessage(ctx context.Context, rule *models.ParsingRule, msg *ParsedMessage) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
	existingPost, err := p.postRepo.GetByMessageID(ctx, rule.SourceChannel, msg.ID)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞: %v", err)
	}

	if existingPost != nil {
		p.logger.Debugf("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ %d —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ", msg.ID)
		return nil
	}

	// –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–∞–≤–∏–ª–∞
	if !p.applyFilters(rule, msg) {
		p.logger.Debugf("üö´ –°–æ–æ–±—â–µ–Ω–∏–µ %d –Ω–µ –ø—Ä–æ—à–ª–æ —Ñ–∏–ª—å—Ç—Ä—ã", msg.ID)
		return nil
	}

	// –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
	transformedContent := rule.ApplyTransformations(msg.Content)

	// –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç
	post := models.NewPost(rule.ID, msg.ID, rule.SourceChannel, transformedContent, msg.MediaType)
	post.MediaURL = msg.MediaURL
	post.PostedAt = msg.Date
	// –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±–∞ —Å—Ç–∞—Ç—É—Å–∞ false (—É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ NewPost)
	post.PublishedTelegram = false
	post.PublishedVK = false

	if err := post.Validate(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: %v", err)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
	if err := p.postRepo.Create(ctx, post); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞: %v", err)
	}

	p.logger.Infof("üíæ –°–æ–æ–±—â–µ–Ω–∏–µ %d —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ –ø–æ—Å—Ç ID %d", msg.ID, post.ID)

	// –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
	p.logger.Infof("üì§ –ù–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–æ—Å—Ç–∞ ID %d", post.ID)
	if err := p.multiPublisher.Publish(ctx, post, rule); err != nil {
		p.logger.Errorf("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ %d: %v", post.ID, err)
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: %v", err)
	}

	p.logger.Infof("‚úÖ –ü–æ—Å—Ç ID %d —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω", post.ID)
	return nil
}

// applyFilters –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–∞–≤–∏–ª–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
func (p *TelegramParser) applyFilters(rule *models.ParsingRule, msg *ParsedMessage) bool {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
	if !rule.MatchesKeywords(msg.Content) {
		return false
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–≤-–∏—Å–∫–ª—é—á–µ–Ω–∏–π
	if rule.ContainsExcludedWords(msg.Content) {
		return false
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –º–µ–¥–∏–∞
	if !rule.SupportsMediaType(msg.MediaType) {
		return false
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
	if !rule.TextLengthValid(msg.Content) {
		return false
	}

	return true
}

// normalizeChannel –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç –∫–∞–Ω–∞–ª–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
func (p *TelegramParser) normalizeChannel(channel string) string {
	channel = strings.TrimSpace(channel)
	channel = strings.TrimPrefix(channel, "https://")
	channel = strings.TrimPrefix(channel, "http://")
	channel = strings.TrimPrefix(channel, "t.me/")
	channel = strings.TrimPrefix(channel, "@")
	return "@" + channel
}

// getChannelDisplayName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
func (p *TelegramParser) getChannelDisplayName(channel string) string {
	normalized := p.normalizeChannel(channel)
	return fmt.Sprintf("%s (%s)", normalized, channel)
}

// getCheckInterval –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
func (p *TelegramParser) getCheckInterval(rule *models.ParsingRule) time.Duration {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ –ø—Ä–∞–≤–∏–ª–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2 –º–∏–Ω—É—Ç—ã
	interval := rule.CheckInterval
	if interval <= 0 {
		interval = 2
	}
	return time.Duration(interval) * time.Minute
}

// ParsedMessage —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞—Å–ø–∞—Ä—à–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
type ParsedMessage struct {
	ID            int64
	SourceChannel string
	Content       string
	MediaType     models.MediaType
	MediaURL      string
	Date          time.Time
}
