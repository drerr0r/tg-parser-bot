package parser

import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/gotd/td/telegram"
	"github.com/gotd/td/telegram/auth"
	"github.com/gotd/td/tg"
	"go.uber.org/zap"

	"github.com/drerr0r/tgparserbot/internal/models"
)

// MTProtoClient –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MTProto API
type MTProtoClient struct {
	client  *telegram.Client
	apiID   int
	apiHash string
	phone   string
	session string
	logger  *zap.SugaredLogger
	isAuth  bool
	running bool
}

// NewMTProtoClient —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π MTProto –∫–ª–∏–µ–Ω—Ç
func NewMTProtoClient(apiID int, apiHash, phone, session string, logger *zap.SugaredLogger) *MTProtoClient {
	return &MTProtoClient{
		apiID:   apiID,
		apiHash: apiHash,
		phone:   phone,
		session: session,
		logger:  logger,
		isAuth:  false,
		running: false,
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
func (m *MTProtoClient) Start(ctx context.Context) error {
	if m.running {
		return fmt.Errorf("–∫–ª–∏–µ–Ω—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
	}

	m.logger.Info("üîó –ó–∞–ø—É—Å–∫ MTProto –∫–ª–∏–µ–Ω—Ç–∞...")

	client := telegram.NewClient(m.apiID, m.apiHash, telegram.Options{
		SessionStorage: &telegram.FileSessionStorage{
			Path: m.session + ".session",
		},
		Logger: m.logger.Desugar(),
	})

	m.client = client
	m.running = true

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		if err := client.Run(ctx, func(ctx context.Context) error {
			m.logger.Info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
			authStatus, err := m.client.Auth().Status(ctx)
			if err != nil {
				m.logger.Errorf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: %v", err)
				return err
			}

			if authStatus.Authorized {
				m.logger.Info("‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Telegram")
				m.isAuth = true
			} else {
				m.logger.Info("üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Telegram...")
				m.logger.Info("üì± –ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")

				// –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥
				flow := auth.NewFlow(
					auth.Constant(m.phone, "", auth.CodeAuthenticatorFunc(func(ctx context.Context, sentCode *tg.AuthSentCode) (string, error) {
						m.logger.Info("üì± –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram:")
						var code string
						fmt.Scanln(&code)
						return code, nil
					})),
					auth.SendCodeOptions{},
				)

				if err := m.client.Auth().IfNecessary(ctx, flow); err != nil {
					m.logger.Errorf("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: %v", err)
					return err
				}

				m.isAuth = true
				m.logger.Info("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Telegram")
			}

			// –î–µ—Ä–∂–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–º
			m.logger.Info("üîÑ –ö–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ, –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤...")
			<-ctx.Done()
			return nil
		}); err != nil {
			m.logger.Errorf("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞: %v", err)
		}

		m.running = false
		m.logger.Info("üõë MTProto –∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	}()

	// –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
	time.Sleep(2 * time.Second)
	return nil
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç
func (m *MTProtoClient) Stop() {
	m.running = false
}

// GetChannelMessages –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
func (m *MTProtoClient) GetChannelMessages(ctx context.Context, channel string, limit int) ([]*ParsedMessage, error) {
	if !m.isAuth || m.client == nil {
		return nil, fmt.Errorf("–∫–ª–∏–µ–Ω—Ç –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
	}

	normalizedChannel := strings.TrimPrefix(channel, "@")
	m.logger.Infof("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞: %s (–ª–∏–º–∏—Ç: %d)", normalizedChannel, limit)

	api := m.client.API()

	// –ò—â–µ–º –∫–∞–Ω–∞–ª
	resolved, err := api.ContactsResolveUsername(ctx, &tg.ContactsResolveUsernameRequest{
		Username: normalizedChannel,
	})
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–∞ %s: %v", normalizedChannel, err)
	}

	var channelPeer *tg.Channel
	for _, chat := range resolved.Chats {
		if c, ok := chat.(*tg.Channel); ok {
			channelPeer = c
			break
		}
	}

	if channelPeer == nil {
		return nil, fmt.Errorf("–∫–∞–Ω–∞–ª %s –Ω–µ –Ω–∞–π–¥–µ–Ω", normalizedChannel)
	}

	m.logger.Infof("‚úÖ –ù–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª: %s (ID: %d)", normalizedChannel, channelPeer.ID)

	// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
	history, err := api.MessagesGetHistory(ctx, &tg.MessagesGetHistoryRequest{
		Peer: &tg.InputPeerChannel{
			ChannelID:  channelPeer.ID,
			AccessHash: channelPeer.AccessHash,
		},
		Limit: limit,
	})
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: %v", err)
	}

	var parsedMessages []*ParsedMessage

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	switch result := history.(type) {
	case *tg.MessagesChannelMessages:
		m.logger.Infof("üìä –ü–æ–ª—É—á–µ–Ω–æ %d —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞", len(result.Messages))
		for _, msg := range result.Messages {
			parsedMsg, err := m.parseMessage(msg, channel)
			if err != nil {
				m.logger.Warnf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
				continue
			}
			if parsedMsg != nil {
				parsedMessages = append(parsedMessages, parsedMsg)
			}
		}
	case *tg.MessagesMessages:
		m.logger.Infof("üìä –ü–æ–ª—É—á–µ–Ω–æ %d —Å–æ–æ–±—â–µ–Ω–∏–π", len(result.Messages))
		for _, msg := range result.Messages {
			parsedMsg, err := m.parseMessage(msg, channel)
			if err != nil {
				m.logger.Warnf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
				continue
			}
			if parsedMsg != nil {
				parsedMessages = append(parsedMessages, parsedMsg)
			}
		}
	default:
		return nil, fmt.Errorf("–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: %T", history)
	}

	m.logger.Infof("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ %d —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ %s", len(parsedMessages), normalizedChannel)
	return parsedMessages, nil
}

// parseMessage –ø–∞—Ä—Å–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram –≤ –Ω–∞—à—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
func (m *MTProtoClient) parseMessage(msg tg.MessageClass, channel string) (*ParsedMessage, error) {
	var message *tg.Message

	switch msg := msg.(type) {
	case *tg.Message:
		message = msg
	case *tg.MessageEmpty:
		return nil, nil
	case *tg.MessageService:
		return nil, nil
	default:
		return nil, fmt.Errorf("–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: %T", msg)
	}

	content := message.Message
	if content == "" {
		return nil, nil
	}

	mediaType := models.MediaText
	var mediaURL string

	if message.Media != nil {
		switch media := message.Media.(type) {
		case *tg.MessageMediaPhoto:
			mediaType = models.MediaPhoto
			m.logger.Debugf("üì∑ –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ %d", message.ID)

		case *tg.MessageMediaDocument:
			mediaType = models.MediaDocument
			m.logger.Debugf("üìÑ –ù–∞–π–¥–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ %d", message.ID)

		case *tg.MessageMediaWebPage:
			if media.Webpage != nil {
				if webpage, ok := media.Webpage.(*tg.WebPage); ok {
					mediaURL = webpage.URL
					m.logger.Debugf("üåê –ù–∞–π–¥–µ–Ω–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞: %s", webpage.URL)
				}
			}
		}
	}

	parsedMsg := &ParsedMessage{
		ID:            int64(message.ID),
		SourceChannel: channel,
		Content:       content,
		MediaType:     mediaType,
		MediaURL:      mediaURL,
		Date:          time.Unix(int64(message.Date), 0),
	}

	m.logger.Debugf("üìù –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ %d: %s", message.ID, truncateText(content, 100))
	return parsedMsg, nil
}

// GetNewMessages –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ ID)
func (m *MTProtoClient) GetNewMessages(ctx context.Context, channel string, lastMessageID int64) ([]*ParsedMessage, error) {
	if !m.isAuth || m.client == nil {
		return nil, fmt.Errorf("–∫–ª–∏–µ–Ω—Ç –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ, —á—Ç–æ –Ω–æ–≤–µ–µ lastMessageID
	allMessages, err := m.GetChannelMessages(ctx, channel, 50)
	if err != nil {
		return nil, err
	}

	var newMessages []*ParsedMessage
	for _, msg := range allMessages {
		if msg.ID > lastMessageID {
			newMessages = append(newMessages, msg)
			m.logger.Debugf("üÜï –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ID %d", msg.ID)
		}
	}

	m.logger.Infof("‚úÖ –ù–∞–π–¥–µ–Ω–æ %d –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ %s", len(newMessages), channel)
	return newMessages, nil
}

// TestConnection –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
func (m *MTProtoClient) TestConnection(ctx context.Context) error {
	if !m.isAuth || m.client == nil {
		return fmt.Errorf("–∫–ª–∏–µ–Ω—Ç –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
	}

	_, err := m.client.API().HelpGetConfig(ctx)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v", err)
	}

	m.logger.Info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —Ä–∞–±–æ—Ç–∞–µ—Ç")
	return nil
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞
func truncateText(text string, maxLength int) string {
	if len(text) <= maxLength {
		return text
	}
	return text[:maxLength] + "..."
}
