package api

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strconv"
	"strings"

	"github.com/drerr0r/tgparserbot/internal/models"
	"github.com/drerr0r/tgparserbot/internal/storage"
	"github.com/drerr0r/tgparserbot/internal/utils"
	"go.uber.org/zap"
)

type Handlers struct {
	ruleRepo *storage.RuleRepository
	postRepo *storage.PostRepository
	userRepo *storage.UserRepository
	logger   *zap.SugaredLogger
	cfg      *models.Config
}

func NewHandlers(ruleRepo *storage.RuleRepository, postRepo *storage.PostRepository, userRepo *storage.UserRepository, logger *zap.SugaredLogger, cfg *models.Config) *Handlers {
	return &Handlers{
		ruleRepo: ruleRepo,
		postRepo: postRepo,
		userRepo: userRepo,
		logger:   logger,
		cfg:      cfg,
	}
}

// HealthCheck handler
func (h *Handlers) HealthCheck(w http.ResponseWriter, r *http.Request) {
	response := map[string]string{
		"status":  "ok",
		"service": "tg-parser-bot",
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

// GetRules –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞
func (h *Handlers) GetRules(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	rules, err := h.ruleRepo.List(ctx, 100, 0)
	if err != nil {
		h.sendError(w, http.StatusInternalServerError, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª: %v", err)
		return
	}

	h.sendJSON(w, http.StatusOK, rules)
}

// CreateRule —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ
func (h *Handlers) CreateRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var rule models.ParsingRule
	if err := json.NewDecoder(r.Body).Decode(&rule); err != nil {
		h.sendError(w, http.StatusBadRequest, "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
		return
	}

	// –í–∞–ª–∏–¥–∞—Ü–∏—è
	if err := rule.Validate(); err != nil {
		h.sendError(w, http.StatusBadRequest, "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: %v", err)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª–æ
	if err := h.ruleRepo.Create(ctx, &rule); err != nil {
		h.sendError(w, http.StatusInternalServerError, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞: %v", err)
		return
	}

	h.logger.Infof("‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ: %s –¥–ª—è –∫–∞–Ω–∞–ª–∞ %s", rule.Name, rule.SourceChannel)
	h.sendJSON(w, http.StatusCreated, rule)
}

// UpdateRule –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª–æ
func (h *Handlers) UpdateRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ path parameter {id}
	idStr := r.PathValue("id")
	if idStr == "" {
		h.sendError(w, http.StatusBadRequest, "ID –ø—Ä–∞–≤–∏–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
		return
	}

	id, err := strconv.ParseInt(idStr, 10, 64)
	if err != nil {
		h.sendError(w, http.StatusBadRequest, "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–∞–≤–∏–ª–∞: %v", err)
		return
	}

	var rule models.ParsingRule
	if err := json.NewDecoder(r.Body).Decode(&rule); err != nil {
		h.sendError(w, http.StatusBadRequest, "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
		return
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID –∏–∑ URL
	rule.ID = id

	// –í–∞–ª–∏–¥–∞—Ü–∏—è
	if err := rule.Validate(); err != nil {
		h.sendError(w, http.StatusBadRequest, "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: %v", err)
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–æ
	if err := h.ruleRepo.Update(ctx, &rule); err != nil {
		h.sendError(w, http.StatusInternalServerError, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞: %v", err)
		return
	}

	h.logger.Infof("‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª–æ ID %d: %s", rule.ID, rule.Name)
	h.sendJSON(w, http.StatusOK, rule)
}

// DeleteRule —É–¥–∞–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª–æ
func (h *Handlers) DeleteRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ path parameter {id}
	idStr := r.PathValue("id")
	if idStr == "" {
		h.sendError(w, http.StatusBadRequest, "ID –ø—Ä–∞–≤–∏–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
		return
	}

	id, err := strconv.ParseInt(idStr, 10, 64)
	if err != nil {
		h.sendError(w, http.StatusBadRequest, "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–∞–≤–∏–ª–∞: %v", err)
		return
	}

	if err := h.ruleRepo.Delete(ctx, id); err != nil {
		h.sendError(w, http.StatusInternalServerError, "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞: %v", err)
		return
	}

	h.logger.Infof("üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª–æ ID %d", id)
	h.sendJSON(w, http.StatusOK, map[string]string{"message": "–ü—Ä–∞–≤–∏–ª–æ —É–¥–∞–ª–µ–Ω–æ"})
}

// GetPosts –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å—Ç—ã
func (h *Handlers) GetPosts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
	limit, _ := strconv.Atoi(r.URL.Query().Get("limit"))
	offset, _ := strconv.Atoi(r.URL.Query().Get("offset"))

	if limit == 0 {
		limit = 50
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤
	posts, err := h.postRepo.GetPosts(ctx, limit, offset)
	if err != nil {
		h.sendError(w, http.StatusInternalServerError, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: %v", err)
		return
	}

	// –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ null
	if posts == nil {
		posts = []*models.Post{}
	}

	h.sendJSON(w, http.StatusOK, posts)
}

// GetStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
func (h *Handlers) GetStats(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
	rules, err := h.ruleRepo.GetActiveRules(ctx)
	if err != nil {
		h.sendError(w, http.StatusInternalServerError, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %v", err)
		return
	}

	stats := map[string]interface{}{
		"active_rules": len(rules),
		"service":      "tg-parser-bot",
		"status":       "running",
	}

	h.sendJSON(w, http.StatusOK, stats)
}

// Login –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞
func (h *Handlers) Login(w http.ResponseWriter, r *http.Request) {
	if r.Method != "POST" {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	var req models.LoginRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		writeJSONError(w, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", http.StatusBadRequest)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
	user, err := h.userRepo.GetByUsername(r.Context(), req.Username)
	if err != nil {
		h.logger.Errorf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
		writeJSONError(w, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", http.StatusInternalServerError)
		return
	}

	if user == nil {
		writeJSONError(w, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å", http.StatusUnauthorized)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
	if !utils.CheckPasswordHash(req.Password, user.PasswordHash) {
		writeJSONError(w, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å", http.StatusUnauthorized)
		return
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
	token, err := GenerateJWTToken(user, h.cfg.Auth.JWTSecret, h.cfg.Auth.JWTDuration)
	if err != nil {
		h.logger.Errorf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: %v", err)
		writeJSONError(w, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", http.StatusInternalServerError)
		return
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(models.LoginResponse{
		Token: token,
		User:  user,
	})
}

// GetCurrentUser –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *Handlers) GetCurrentUser(w http.ResponseWriter, r *http.Request) {
	if r.Method != "GET" {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	userID, ok := r.Context().Value("user_id").(int64)
	if !ok {
		writeJSONError(w, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", http.StatusUnauthorized)
		return
	}

	user, err := h.userRepo.GetByID(r.Context(), userID)
	if err != nil {
		h.logger.Errorf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
		writeJSONError(w, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", http.StatusInternalServerError)
		return
	}

	if user == nil {
		writeJSONError(w, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", http.StatusNotFound)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(user)
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

func (h *Handlers) sendJSON(w http.ResponseWriter, status int, data interface{}) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(status)
	json.NewEncoder(w).Encode(data)
}

func (h *Handlers) sendError(w http.ResponseWriter, status int, format string, args ...interface{}) {
	message := fmt.Sprintf(format, args...)
	h.logger.Error(message)

	errorResponse := map[string]string{
		"error":  message,
		"status": "error",
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(status)
	json.NewEncoder(w).Encode(errorResponse)
}

// NotImplemented –≤—Ä–µ–º–µ–Ω–Ω—ã–π handler
func (h *Handlers) NotImplemented(w http.ResponseWriter, r *http.Request) {
	h.sendError(w, http.StatusNotImplemented, "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
}

// ServeFrontend –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (h *Handlers) ServeFrontend(w http.ResponseWriter, r *http.Request) {
	// –î–ª—è –≤—Å–µ—Ö –Ω–µ-API –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if r.URL.Path == "/" || !strings.HasPrefix(r.URL.Path, "/api/") {
		response := map[string]interface{}{
			"message":  "TG Parser Bot API",
			"status":   "running",
			"frontend": "http://localhost:3000",
			"version":  "1.0.0",
		}
		h.sendJSON(w, http.StatusOK, response)
		return
	}

	// –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö API endpoints
	h.sendError(w, http.StatusNotFound, "API endpoint not found")
}
