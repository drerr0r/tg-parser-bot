// cmd/check-migrations/main.go
package main

import (
	"fmt"
	"log"
	"os"
	"path/filepath"

	"github.com/drerr0r/tgparserbot/internal/config"
	"github.com/drerr0r/tgparserbot/internal/storage"
)

func main() {
	cfg, err := config.LoadConfig("configs/config.yaml")
	if err != nil {
		log.Fatal(err)
	}

	db, err := storage.New(cfg.Database)
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	fmt.Println("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π...")
	fmt.Printf("–ü—Ä–∏–º–µ–Ω–µ–Ω—ã –ª–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: %v\n", db.CheckMigrationsApplied())

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—É—Ç–µ–π
	paths := []string{
		"./migrations",
		"migrations",
		"../migrations",
		"internal/storage/migrations",
	}

	fmt.Println("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π –∫ –º–∏–≥—Ä–∞—Ü–∏—è–º:")
	for _, path := range paths {
		if _, err := os.Stat(path); err == nil {
			files, _ := filepath.Glob(filepath.Join(path, "*.sql"))
			fmt.Printf("‚úÖ %s: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (%d —Ñ–∞–π–ª–æ–≤)\n", path, len(files))
		} else {
			fmt.Printf("‚ùå %s: –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n", path)
		}
	}
}
