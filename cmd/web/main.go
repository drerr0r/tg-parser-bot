package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/drerr0r/tgparserbot/internal/api"
	"github.com/drerr0r/tgparserbot/internal/config"
	"github.com/drerr0r/tgparserbot/internal/storage"
	"github.com/drerr0r/tgparserbot/pkg/logger"
	"go.uber.org/zap"
)

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	cfg, err := config.LoadConfig("configs/config.yaml")
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
	if err := logger.Init(cfg.Logger.Level, cfg.Logger.Format, cfg.Logger.FilePath); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–≥–µ—Ä–∞: %v", err)
	}
	defer logger.Sync()

	logger.Sugar().Info("üöÄ –ó–∞–ø—É—Å–∫ Web UI —Å–µ—Ä–≤–µ—Ä–∞...")

	// –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	if err := config.Validate(cfg); err != nil {
		logger.Sugar().Fatalf("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	db, err := storage.New(cfg.Database)
	if err != nil {
		logger.Sugar().Fatalf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: %v", err)
	}
	defer db.Close()

	logger.Sugar().Info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")

	// –£–ú–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ò –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ú–ò–ì–†–ê–¶–ò–ô
	migrationPaths := []string{
		"./migrations",  // –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
		"migrations",    // —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
		"../migrations", // –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
	}

	var migrationApplied bool
	var migrationErr error

	for _, path := range migrationPaths {
		logger.Sugar().Infof("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –≤: %s", path)

		if _, err := os.Stat(path); err == nil {
			// –ü–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–±—É–µ–º –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏
			if err := db.RunMigrations(path); err == nil {
				logger.Sugar().Infof("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∏–∑: %s", path)
				migrationApplied = true
				migrationErr = nil
				break
			} else {
				migrationErr = err
				logger.Sugar().Debugf("‚ùå –û—à–∏–±–∫–∞ –≤ –ø—É—Ç–∏ %s: %v", path, err)
			}
		}
	}

	if !migrationApplied {
		if migrationErr != nil {
			logger.Sugar().Errorf("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏: %v", migrationErr)
			logger.Sugar().Fatal("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–µ–∑ –º–∏–≥—Ä–∞—Ü–∏–π –ë–î")
		} else {
			logger.Sugar().Warn("‚ö†Ô∏è –ü–∞–ø–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î...")
		}
	}

	// –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î
	if !db.CheckMigrationsApplied() {
		logger.Sugar().Fatal("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ë–î –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±—É–µ–º–æ–π —Å—Ö–µ–º–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏.")
	} else {
		logger.Sugar().Info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã –ë–î –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
	ruleRepo := storage.NewRuleRepository(db)
	postRepo := storage.NewPostRepository(db)

	logger.Sugar().Info("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
	userRepo := storage.NewUserRepository(db)
	handler := api.SetupRoutes(ruleRepo, postRepo, userRepo, logger.Sugar(), cfg)

	server := &http.Server{
		Addr:         fmt.Sprintf("%s:%d", cfg.Server.Host, cfg.Server.Port),
		Handler:      handler,
		ReadTimeout:  15 * time.Second,
		WriteTimeout: 15 * time.Second,
		IdleTimeout:  60 * time.Second,
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		logger.Sugar().Infof("üåê Web —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://%s:%d", cfg.Server.Host, cfg.Server.Port)
		logger.Sugar().Info("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:")
		logger.Sugar().Info("   GET /health - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
		logger.Sugar().Info("   GET /api/rules - –°–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª")
		logger.Sugar().Info("   GET /api/posts - –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤")
		logger.Sugar().Info("   GET /api/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

		if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			logger.Sugar().Fatalf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
		}
	}()

	// –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	waitForShutdown(server, logger.Sugar())
}

func waitForShutdown(server *http.Server, logger *zap.SugaredLogger) {
	stop := make(chan os.Signal, 1)
	signal.Notify(stop, os.Interrupt, syscall.SIGTERM)

	<-stop
	logger.Info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	if err := server.Shutdown(ctx); err != nil {
		logger.Errorf("‚ùå –û—à–∏–±–∫–∞ graceful shutdown: %v", err)
	} else {
		logger.Info("‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	}
}
