package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/drerr0r/tgparserbot/internal/config"
	"github.com/drerr0r/tgparserbot/internal/parser"
	"github.com/drerr0r/tgparserbot/internal/publisher"
	"github.com/drerr0r/tgparserbot/internal/storage"
	"github.com/drerr0r/tgparserbot/pkg/logger"
	"go.uber.org/zap"
)

func main() {
	// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	cfg, err := config.LoadConfig("configs/config.yaml")
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
	logger, _ := zap.NewDevelopment()
	sugar := logger.Sugar()
	defer logger.Sync()

	sugar.Info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –ø–∞—Ä—Å–µ—Ä–∞...")

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
	db, err := storage.New(cfg.Database)
	if err != nil {
		sugar.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: %v", err)
	}
	defer db.Close()

	sugar.Info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
	ruleRepo := storage.NewRuleRepository(db)
	postRepo := storage.NewPostRepository(db)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MTProto –∫–ª–∏–µ–Ω—Ç–∞
	mtprotoClient := parser.NewMTProtoClient(
		cfg.Telegram.APIID,
		cfg.Telegram.APIHash,
		cfg.Telegram.Phone,
		cfg.Telegram.SessionFile,
		sugar,
	)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–±–ª–∏—à–µ—Ä–æ–≤
	var tgPublisher *publisher.TelegramPublisher
	var vkPublisher *publisher.VKPublisher

	if cfg.Telegram.BotToken != "" {
		tgPublisher, err = publisher.NewTelegramPublisher(cfg.Telegram.BotToken, sugar)
		if err != nil {
			sugar.Errorf("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä–∞: %v", err)
		} else {
			sugar.Info("‚úÖ Telegram –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
		}
	}

	if cfg.VK.AccessToken != "" {
		vkPublisher, err = publisher.NewVKPublisher(cfg.VK.AccessToken, cfg.VK.GroupID, sugar)
		if err != nil {
			sugar.Errorf("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VK –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä–∞: %v", err)
		} else {
			sugar.Info("‚úÖ VK –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
		}
	}

	// –°–æ–∑–¥–∞–µ–º MultiPublisher
	multiPublisher := publisher.NewMultiPublisher(
		tgPublisher,
		vkPublisher,
		postRepo,
		cfg.Telegram.TargetChannel,
		sugar,
	)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞
	telegramParser := parser.NewTelegramParser(
		db,
		ruleRepo,
		postRepo,
		multiPublisher,
		mtprotoClient,
		sugar,
	)

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// –ó–ê–ü–£–°–ö–ê–ï–ú –§–û–ù–û–í–´–ô –ü–†–û–¶–ï–°–° –ü–£–ë–õ–ò–ö–ê–¶–ò–ò (–ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è ctx)
	go func() {
		sugar.Info("üöÄ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...")

		ticker := time.NewTicker(30 * time.Second) // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
		defer ticker.Stop()

		for {
			select {
			case <-ticker.C:
				if err := publishUnpublishedPosts(ctx, postRepo, ruleRepo, multiPublisher); err != nil {
					sugar.Errorf("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤: %v", err)
				}
			case <-ctx.Done():
				sugar.Info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
				return
			}
		}
	}()

	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	go func() {
		sig := <-sigChan
		sugar.Infof("üìû –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª: %v", sig)
		telegramParser.Stop()
		cancel()
	}()

	// –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
	for {
		sugar.Info("üîÑ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞...")

		if err := telegramParser.Start(ctx); err != nil {
			sugar.Errorf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: %v", err)
			sugar.Info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")

			select {
			case <-time.After(30 * time.Second):
				continue // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
			case <-ctx.Done():
				sugar.Info("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ —Å–∏–≥–Ω–∞–ª—É")
				return
			}
		} else {
			sugar.Info("‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
		}

		// –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
		<-ctx.Done()
		sugar.Info("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞")
		return
	}
}

// publishUnpublishedPosts –ø—É–±–ª–∏–∫—É–µ—Ç –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
func publishUnpublishedPosts(ctx context.Context, postRepo *storage.PostRepository, ruleRepo *storage.RuleRepository, publisher *publisher.MultiPublisher) error {
	// –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
	posts, err := postRepo.GetUnpublishedPosts(ctx, 10)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: %v", err)
	}

	if len(posts) > 0 {
		logger.Sugar().Infof("üì§ –ù–∞–π–¥–µ–Ω–æ %d –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", len(posts))
	}

	for _, post := range posts {
		// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –ø–æ—Å—Ç–∞
		rule, err := ruleRepo.GetByID(ctx, post.RuleID)
		if err != nil {
			logger.Sugar().Errorf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø–æ—Å—Ç–∞ %d: %v", post.ID, err)
			continue
		}

		if rule == nil {
			logger.Sugar().Errorf("‚ùå –ü—Ä–∞–≤–∏–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ—Å—Ç–∞ %d", post.ID)
			continue
		}

		logger.Sugar().Infof("üîÑ –ü—É–±–ª–∏–∫—É—é –ø–æ—Å—Ç ID %d: %s", post.ID, post.GetSummary())

		// –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç (—Ç–µ–ø–µ—Ä—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤)
		if err := publisher.Publish(ctx, post, rule); err != nil {
			logger.Sugar().Errorf("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ %d: %v", post.ID, err)

			// –û—Ç–º–µ—á–∞–µ–º –ø–æ—Å—Ç –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—ã–π
			if markErr := postRepo.MarkAsFailed(ctx, post.ID, err.Error()); markErr != nil {
				logger.Sugar().Errorf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –ø–æ—Å—Ç–∞ –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ: %v", markErr)
			}
		} else {
			logger.Sugar().Infof("‚úÖ –ü–æ—Å—Ç %d —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω", post.ID)
		}
	}

	return nil
}
